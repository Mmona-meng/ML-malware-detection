import pandas as pd
import dask.dataframe as dd
import numpy as np


# Function to convert data types to reduce memory
def convert_types(df):
    # Convert data types to reduce memory
    for c in df:
        col_type = str(df[c].dtypes)
        numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

        # Convert objects to category
        if col_type == 'object':
            df[c] = df[c].astype('category')

        # numerics
        elif col_type in numerics:
            c_min = df[c].min()
            c_max = df[c].max()
            if col_type[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[c] = df[c].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[c] = df[c].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[c] = df[c].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[c] = df[c].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[c] = df[c].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[c] = df[c].astype(np.float32)
                else:
                    df[c] = df[c].astype(np.float64)

    return df


# Function to load and preprocess data
def load_data(file_path):
    ddf = dd.read_csv(file_path)
    df = ddf.compute()
    return convert_types(df)


# Function to print categorical features
def print_categorical_features(df, dataset_name):
    print(f"Categorical features in {dataset_name}:")
    categorical_cols = df.select_dtypes(include=['category']).columns
    print(categorical_cols)


# Load data
train = load_data('train_refine.csv')
test = load_data('test_refine.csv')

# Check and print categorical features
print_categorical_features(train, 'Train Dataset')
print_categorical_features(test, 'Test Dataset')

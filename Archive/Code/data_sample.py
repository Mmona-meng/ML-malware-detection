import pandas as pd
import numpy as np
from tqdm import tqdm

# Paths to the datasets
data_path_trainset = 'train.csv'
data_path_testset = 'test.csv'

# Fraction of data to sample
train_fraction = 0.1  # 10% for training set
test_fraction = 0.1   # 10% for test set

# Set a seed for reproducibility
seed = 42
np.random.seed(seed)  # This ensures the random choices are reproducible

# Define the dtypes (assuming same structure for both train and test sets), refer to a kaggle discussion
dtypes = {
    'MachineIdentifier':                                    'category',
    'ProductName':                                          'category',
    'EngineVersion':                                        'category',
    'AppVersion':                                           'category',
    'AvSigVersion':                                         'category',
    'IsBeta':                                               'int8',
    'RtpStateBitfield':                                     'float16',
    'IsSxsPassiveMode':                                     'int8',
    'DefaultBrowsersIdentifier':                            'float32',
    'AVProductStatesIdentifier':                            'float32',
    'AVProductsInstalled':                                  'float16',
    'AVProductsEnabled':                                    'float16',
    'HasTpm':                                               'int8',
    'CountryIdentifier':                                    'int16',
    'CityIdentifier':                                       'float32',
    'OrganizationIdentifier':                               'float16',
    'GeoNameIdentifier':                                    'float16',
    'LocaleEnglishNameIdentifier':                          'int16',
    'Platform':                                             'category',
    'Processor':                                            'category',
    'OsVer':                                                'category',
    'OsBuild':                                              'int16',
    'OsSuite':                                              'int16',
    'OsPlatformSubRelease':                                 'category',
    'OsBuildLab':                                           'category',
    'SkuEdition':                                           'category',
    'IsProtected':                                          'float16',
    'AutoSampleOptIn':                                      'int8',
    'PuaMode':                                              'category',
    'SMode':                                                'float16',
    'IeVerIdentifier':                                      'float16',
    'SmartScreen':                                          'category',
    'Firewall':                                             'float16',
    'UacLuaenable':                                         'float64',  # was 'float32'
    'Census_MDC2FormFactor':                                'category',
    'Census_DeviceFamily':                                  'category',
    'Census_OEMNameIdentifier':                             'float32',  # was 'float16'
    'Census_OEMModelIdentifier':                            'float32',
    'Census_ProcessorCoreCount':                            'float16',
    'Census_ProcessorManufacturerIdentifier':               'float16',
    'Census_ProcessorModelIdentifier':                      'float32',  # was 'float16'
    'Census_ProcessorClass':                                'category',
    'Census_PrimaryDiskTotalCapacity':                      'float64',  # was 'float32'
    'Census_PrimaryDiskTypeName':                           'category',
    'Census_SystemVolumeTotalCapacity':                     'float64',  # was 'float32'
    'Census_HasOpticalDiskDrive':                           'int8',
    'Census_TotalPhysicalRAM':                              'float32',
    'Census_ChassisTypeName':                               'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',  # was 'float16'
    'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',  # was 'float16'
    'Census_InternalPrimaryDisplayResolutionVertical':      'float32',  # was 'float16'
    'Census_PowerPlatformRoleName':                         'category',
    'Census_InternalBatteryType':                           'category',
    'Census_InternalBatteryNumberOfCharges':                'float64',  # was 'float32'
    'Census_OSVersion':                                     'category',
    'Census_OSArchitecture':                                'category',
    'Census_OSBranch':                                      'category',
    'Census_OSBuildNumber':                                 'int16',
    'Census_OSBuildRevision':                               'int32',
    'Census_OSEdition':                                     'category',
    'Census_OSSkuName':                                     'category',
    'Census_OSInstallTypeName':                             'category',
    'Census_OSInstallLanguageIdentifier':                   'float16',
    'Census_OSUILocaleIdentifier':                          'int16',
    'Census_OSWUAutoUpdateOptionsName':                     'category',
    'Census_IsPortableOperatingSystem':                     'int8',
    'Census_GenuineStateName':                              'category',
    'Census_ActivationChannel':                             'category',
    'Census_IsFlightingInternal':                           'float16',
    'Census_IsFlightsDisabled':                             'float16',
    'Census_FlightRing':                                    'category',
    'Census_ThresholdOptIn':                                'float16',
    'Census_FirmwareManufacturerIdentifier':                'float16',
    'Census_FirmwareVersionIdentifier':                     'float32',
    'Census_IsSecureBootEnabled':                           'int8',
    'Census_IsWIMBootEnabled':                              'float16',
    'Census_IsVirtualDevice':                               'float16',
    'Census_IsTouchEnabled':                                'int8',
    'Census_IsPenCapable':                                  'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
    'Wdft_IsGamer':                                         'float16',
    'Wdft_RegionIdentifier':                                'float16',
    'HasDetections':                                        'int8'
}


# Function to calculate sample size and skip indices
def calculate_sample_indices(file_path, fraction):
    with open(file_path) as file:
        total_records = sum(1 for line in tqdm(
            file, desc=f"Counting rows in {file_path}")) - 1
    sample_size = int(total_records * fraction)
    skip_indices = np.random.choice(np.arange(1, total_records + 1),
                                    size=total_records - sample_size,
                                    replace=False)
    return np.sort(skip_indices)


# Calculate skip indices for both datasets
skip_indices_train = calculate_sample_indices(
    data_path_trainset, train_fraction)
skip_indices_test = calculate_sample_indices(data_path_testset, test_fraction)

# Load the sampled data
df_train_sample = pd.read_csv(
    data_path_trainset, skiprows=skip_indices_train, dtype=dtypes)
df_test_sample = pd.read_csv(
    data_path_testset, skiprows=skip_indices_test, dtype=dtypes)

# Check the sampled data
print("Train Sample:")
print(df_train_sample.head())
print("\nTest Sample:")
print(df_test_sample.head())

# Save the sampled data to CSV files
df_train_sample.to_csv('train_sample.csv', index=False)
df_test_sample.to_csv('test_sample.csv', index=False)

print('Sampled data saved to train_sample.csv and test_sample.csv')
